// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// NEST JS KHÔNG HỖ TRỢ KẾ THỪA MODEL NÀY VỚI MODEL KHáC
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  fullName  String
  phone     String?
  
  account   Account   @relation(fields: [accountId], references: [id])
  accountId Int       @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  employee Employee? @relation
  customer Customer? @relation
}

model Account {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  user      User?     @relation
  isActive  Boolean   @default(true)
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  accounts  Account[]
}

model Employee {
  id        Int       @id @default(autoincrement())
  hireDate  DateTime
  salary    Float
  position  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Customer {
  id        Int       @id @default(autoincrement())
  points    Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Order {
  id            Int    @id @default(autoincrement())
  status        String
  totalPrice    Float
  discountPrice Float  @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Table {
  id        Int       @id @default(autoincrement())
  number    Int       @unique // Số hiệu bàn
  seats     Int // Số lượng ghế
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // 1 bàn có thể có nhiêu lịch hẹn
}

model Reservation {
  id        Int       @id @default(autoincrement())
  startTime DateTime // Thời gian bắt đầu
  endTime   DateTime // Thời gian kết thúc
  status    String // Trạng thái: "Reserved", "Occupied", "Available", etc.
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // quan hệ 1 lịch hẹn cho 1 bàn
  // 1 bàn có nhiều lịch hẹn
}

model MenuItem {
  id        Int       @id @default(autoincrement())
  name      String
  price     String
  status    String // Trạng thái: "Reserved", "Occupied", "Available", etc.
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Menus {
  id       Int     @id @default(autoincrement())
  name     String
  isActive Boolean @default(true)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model FoodImage {
  id Int @id @default(autoincrement())
}

model Supplier {
  id      Int    @id @default(autoincrement())
  name    String
  address String
  email   String
}

model Ingredient {
  id          Int      @id @default(autoincrement())
  productDate DateTime
  price       Float
  init        String
}

model Voucher {
  id          Int      @id @default(autoincrement())
  percent     Int
  description String
  startDate   DateTime
  endDate     DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Feedbacks {
  id      Int    @id @default(autoincrement())
  content String
  rating  Int    @default(5)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model WarehouseSlip {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

