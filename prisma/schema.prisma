generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  fullName  String
  phone     String?
  username  String   @unique
  password  String
  avatar String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee  Employee?
  customer  Customer?
  feedbacks Feedback[]
  orders    Order[]
  supplier  Supplier?
  menuItems MenuItem[]
}

model Role {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  isActive    Boolean         @default(true)
  permissions RolePermission[]
  users       User[]
}

model Permission {
  id          Int             @id @default(autoincrement())
  action      String
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  roles       RolePermission[]
}

model RolePermission {
  roleId       Int
  permissionId Int
  createdAt    DateTime   @default(now())
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model Employee {
  id        Int       @id @default(autoincrement())
  hireDate  DateTime
  salary    Float
  position  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
  slips     WarehouseSlip[]
}

model Customer {
  id           Int          @id @default(autoincrement())
  points       Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id])
  userId       Int          @unique
  reservations Reservation[]
  vouchers     Voucher[]
}

model Order {
  id            Int           @id @default(autoincrement())
  status        String
  totalPrice    Float
  discountPrice Float         @default(0)
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  details       OrderDetail[]
}

model OrderDetail {
  id         Int      @id @default(autoincrement())
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id])
  menuItemId Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
}

model Table {
  id           Int           @id @default(autoincrement())
  number       Int           @unique
  seats        Int
  status       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]
}

model Reservation {
  id         Int      @id @default(autoincrement())
  startTime  DateTime
  endTime    DateTime
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tableId    Int
  table      Table    @relation(fields: [tableId], references: [id])
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])

  
}

model MenuItem {
  id          Int           @id @default(autoincrement())
  name        String
  price       Float
  status      String
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  images      FoodImage[]
  menuId      Int
  menu        Menu          @relation(fields: [menuId], references: [id])
  orderDetails OrderDetail[]
  ingredients MenuItemIngredient[]
}

model FoodImage {
  id         Int      @id @default(autoincrement())
  url        String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId Int
}

model Menu {
  id        Int        @id @default(autoincrement())
  name      String
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  menuItems MenuItem[]
}

model Supplier {
  id        Int             @id @default(autoincrement())
  name      String
  address   String
  email     String
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  userId    Int             @unique
  user      User            @relation(fields: [userId], references: [id])
  slips     WarehouseSlip[]
}

model Ingredient {
  id          Int                   @id @default(autoincrement())
  name        String
  unit        String
  productDate DateTime
  price       Float
  isActive    Boolean               @default(true)
  status      String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  menuItems   MenuItemIngredient[]
  slipDetails WarehouseSlipDetail[]

  inventory   Inventory?  
}

model MenuItemIngredient {
  menuItemId   Int
  ingredientId Int
  quantity     Float
  menuItem     MenuItem   @relation(fields: [menuItemId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@id([menuItemId, ingredientId])
}

model Voucher {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  percent     Int
  description String
  startDate   DateTime @default(now())
  endDate     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  customerId  Int
  customer    Customer @relation(fields: [customerId], references: [id])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  content   String
  rating    Int      @default(5)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model WarehouseSlip {
  id         Int                   @id @default(autoincrement())
  type       String // "IN" or "OUT"
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  employeeId Int
  employee   Employee              @relation(fields: [employeeId], references: [id])
  supplierId Int
  supplier   Supplier              @relation(fields: [supplierId], references: [id])
  details    WarehouseSlipDetail[]
}

model WarehouseSlipDetail {
  id              Int           @id @default(autoincrement())
  quantity        Float
  warehouseSlipId Int
  warehouseSlip   WarehouseSlip @relation(fields: [warehouseSlipId], references: [id])
  ingredientId    Int
  ingredient      Ingredient    @relation(fields: [ingredientId], references: [id])
}

model Inventory {
  id           Int       @id @default(autoincrement())
  quantity     Float
  lastChecked  DateTime
  ingredientId Int       @unique
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
}